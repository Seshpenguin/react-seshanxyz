{"version":3,"sources":["API/API.js","Pages/Home.js","Pages/Posts.js","Pages/ViewPost.js","Pages/NotFound.js","Pages/About.js","App.js","serviceWorker.js","index.js","Assets/bg.jpg"],"names":["loadDataFromWP","_x","_loadDataFromWP","apply","this","arguments","_callee","endpoint","response","regenerator_default","a","wrap","_context","prev","next","axios","get","sent","console","log","abrupt","t0","error","stop","_callee2","page","_context2","data","_callee3","totalPages","_context3","parseInt","headers","posts","_callee4","id","_context4","Home","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","contentLoaded","homeContent","_x2","_loadPage","loadPage","then","setState","content","rendered","react_default","createElement","Helmet","Container","Jumbotron","dangerouslySetInnerHTML","__html","lib","time","customLoading","Component","Posts","pageToLoad","nextPage","isNextPage","postList","populatePage","newProps","_this2","params","match","populatePageAPI","_this3","_x3","_loadPostsList","loadPostsList","postsJSX","i","length","key","Card","body","className","title","excerpt","react_router_dom","to","Button","variant","size","block","ViewPost","postToLoad","post","_x4","_loadPost","loadPost","postJSX","dayjs","date","format","NotFound","About","setTimeout","App","basename","style","RootStyle","NavStyle","NavButtonStyle","react_router","path","exact","component","height","display","backgroundImage","concat","Background","padding","color","borderRightStyle","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.168f289d.chunk.js","sourcesContent":["// API Calls to the WP-JSON API\n\nimport axios from \"axios\";\n\nexport async function loadDataFromWP(endpoint) {\n    try {\n        const response = await axios.get('https://seshan.xyz/wp-json/wp/v2/' + endpoint);\n        console.log(response);\n        return response;\n    } catch (error) {\n        console.error(error);\n        return false;\n    }\n}\n\n// Get page contents\nexport async function loadPage(page) {\n    let response = await loadDataFromWP('pages/' + page);\n    if(!response) {\n        return false;\n    }\n\n    return response.data;\n}\n\n/* ~~ Blog API Calls ~~ */\n// Takes a page number (starts from zero),\n// returns posts for that page, and number of pages.\nexport async function loadPostsList(page) {\n    let response = await loadDataFromWP('posts?page=' + parseInt(page));\n    if(!response) {\n        return false;\n    }\n\n    let totalPages = response.headers['x-wp-totalpages'];\n\n    return { posts: response.data, totalPages: totalPages };\n}\nexport async function loadPost(id) {\n    let response = await loadDataFromWP('posts/' + parseInt(id));\n    if(!response) {\n        return false;\n    }\n    return response.data;\n}","import React, {Component} from \"react\";\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport { Circle } from 'react-preloaders';\nimport {Helmet} from 'react-helmet';\n\nimport { loadPage } from \"../API/API\";\n\nclass Home extends Component {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props) {\n        super(props);\n        this.state = {\n            contentLoaded: false,\n            homeContent: 'Loading...'\n        };\n\n        // Call the WP REST API and populate content.\n        loadPage(2).then((data) => {\n            this.setState({\n                contentLoaded: true,\n                homeContent: data.content.rendered\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <title>Seshan's Personal Website - Home</title>\n                </Helmet>\n                <Container>\n                    <Jumbotron>\n                        <div dangerouslySetInnerHTML={{__html: this.state.homeContent}} />\n                    </Jumbotron>\n                </Container>\n                <Circle time={0} customLoading={!this.state.contentLoaded} />\n            </div>\n        );\n    }\n}\n\n\nexport default Home;\n","import React, {Component} from \"react\";\nimport { Container, Jumbotron, Card, Button } from 'react-bootstrap';\nimport { Circle } from 'react-preloaders';\nimport {Helmet} from 'react-helmet';\nimport { Link } from \"react-router-dom\";\n\nimport { loadPostsList } from \"../API/API\";\n\nclass Posts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contentLoaded: false,\n            homeContent: 'Loading...',\n            pageToLoad: 1,\n            totalPages: 1,\n            nextPage: 1,\n            isNextPage: true,\n            postList: []\n        };\n    }\n\n    componentDidMount() {\n        this.populatePage(this.props);\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.populatePage(newProps);\n    }\n\n    populatePage(props) {\n        this.setState({ contentLoaded: false }, () => {\n            const { match: { params } } = props;\n            if(typeof params.page !== \"undefined\" && params.page > 0) {\n                //Put the loadPostsList in callback, because setState is async.\n                this.setState({ pageToLoad: params.page }, this.populatePageAPI);\n            } else {\n                console.log('Bad ID');\n                console.log(typeof params.page);\n                this.setState({ pageToLoad: 1 }, this.populatePageAPI);\n            }\n        });\n    }\n    populatePageAPI() {\n        // Call the WP REST API and populate content.\n        loadPostsList(this.state.pageToLoad).then((data) => {\n            this.setState({\n                contentLoaded: true,\n                postList: data.posts,\n                totalPages: data.totalPages\n            }, () => {\n                // Is there a next page?\n                if(this.state.pageToLoad < this.state.totalPages) {\n                    let nextPage = this.state.nextPage + 1;\n                    this.setState({ nextPage: nextPage });\n                } else {\n                    this.setState({ isNextPage: false });\n                }\n            });\n        });\n    }\n\n    render() {\n        console.log(this.state.pageToLoad);\n        // Loop through posts to render.\n        let postsJSX = [];\n        if(this.state.contentLoaded) {\n            for(let i = 0; i < this.state.postList.length; i++) {\n                postsJSX[i] = (\n                    <div key={i}>\n                        <Card body className={'shadow'}>\n                            <h1 dangerouslySetInnerHTML={{__html: this.state.postList[i].title.rendered}} />\n                            <div dangerouslySetInnerHTML={{__html: this.state.postList[i].excerpt.rendered}} />\n                            <Link to={ \"/post/\" + this.state.postList[i].id }>\n                                <Button>\n                                    View Post\n                                </Button>\n                            </Link>\n                        </Card>\n                        <br />\n                    </div>\n                );\n            }\n        } else {\n            return (\n                <div>\n                    <Circle time={0} customLoading={!this.state.contentLoaded} />\n                </div>\n            );\n        }\n        return (\n            <div>\n                <Helmet>\n                    <title>Blog - Seshan's Personal Website</title>\n                </Helmet>\n                <Container>\n                    <Jumbotron>\n                        {postsJSX}\n                        <hr />\n                        <strong>Page {this.state.pageToLoad}/{this.state.totalPages}</strong>\n                        <Link to={ \"/posts/\" + this.state.nextPage }>\n                            <Button variant=\"secondary\" size=\"lg\" block>\n                                Next Page ➡\n                            </Button>\n                        </Link>\n                    </Jumbotron>\n                </Container>\n                <Circle time={0} customLoading={!this.state.contentLoaded} />\n            </div>\n        );\n    }\n}\n\n\nexport default Posts;\n\n","import React, {Component} from \"react\";\nimport { Container, Jumbotron, Card, Button } from 'react-bootstrap';\nimport { Circle } from 'react-preloaders';\nimport {Helmet} from 'react-helmet';\nimport { Link } from \"react-router-dom\";\nimport dayjs from 'dayjs';\n\nimport { loadPost } from \"../API/API\";\n\nclass ViewPost extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contentLoaded: false,\n            homeContent: 'Loading...',\n            postToLoad: 1,\n            post: {}\n        };\n    }\n\n    componentDidMount() {\n        // Get Post ID from params\n        const { match: { params } } = this.props;\n        if(typeof params.post !== \"undefined\" && params.post > 0) {\n            //Put the API in callback, because setState is async.\n            this.setState({ postToLoad: params.post }, () => {\n                loadPost(params.post).then((data) => {\n                    this.setState({ post: data, contentLoaded: true })\n                });\n            });\n        } else {\n            console.log('Bad ID');\n            console.log(typeof params.page);\n        }\n    }\n\n    render() {\n        console.log(this.state.pageToLoad);\n        // Loop through posts to render.\n        let postJSX;\n        if(this.state.contentLoaded) {\n            postJSX = (\n                <div>\n                    <h1>{this.state.post.title.rendered}</h1>\n                    <strong>{dayjs(this.state.post.date).format('DD/MM/YYYY (h:m A)')}</strong>\n                    <hr />\n                    <Card body className={'shadow'}>\n                        <div dangerouslySetInnerHTML={{__html: this.state.post.content.rendered}} />\n                    </Card>\n                    <br />\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Circle time={0} customLoading={!this.state.contentLoaded} />\n                </div>\n            );\n        }\n        return (\n            <div>\n                <Helmet>\n                    <title>{this.state.post.title.rendered} - Seshan's Personal Website</title>\n                </Helmet>\n                <Container>\n                    <Jumbotron>\n                        {postJSX}\n                        <Link to={ \"/posts/1\" }>\n                            <Button variant=\"secondary\" size=\"lg\" block>\n                                Back to Posts\n                            </Button>\n                        </Link>\n                    </Jumbotron>\n                </Container>\n                <Circle time={0} customLoading={!this.state.contentLoaded} />\n            </div>\n        );\n    }\n}\n\n\nexport default ViewPost;\n\n","import React, {Component} from \"react\";\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport { Circle } from 'react-preloaders';\nimport {Helmet} from 'react-helmet';\n\nclass NotFound extends Component {\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <title>Seshan's Personal Website - 404 Not Found</title>\n                </Helmet>\n                <Container>\n                    <Jumbotron>\n                        <h1>\n                            404 - Page Not Found\n                        </h1>\n                    </Jumbotron>\n                </Container>\n                <Circle time={100} />\n            </div>\n        );\n    }\n}\n\nexport default NotFound;\n\n","import React, {Component} from \"react\";\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport { Circle } from 'react-preloaders';\nimport {Helmet} from 'react-helmet';\n\nclass About extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contentLoaded: false\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ contentLoaded: true });\n        }, 500);\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <title>Seshan's Personal Website - 404 Not Found</title>\n                </Helmet>\n                <Container>\n                    <Jumbotron>\n                        <h1>\n                            What is this thing?\n                        </h1>\n                        <hr />\n                        <p>\n                            Welcome to (maybe) the future version of Seshan.XYZ! <br />\n                            This is an experiment to write a new frontend to the currently existing\n                            Seshan.XYZ WordPress website, but instead of using PHP to create a WP Theme, this uses\n                            entirely client-side JS (React), and uses the WP-JSON REST API to populate data.\n                            <br />\n                            This effectively turns WordPress into headless CMS backend.\n                        </p>\n                    </Jumbotron>\n                </Container>\n                <Circle time={0} customLoading={!this.state.contentLoaded} />\n            </div>\n        );\n    }\n}\n\nexport default About;\n","import React, {Component} from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\n// Pages\nimport Home from \"./Pages/Home\";\nimport Posts from \"./Pages/Posts\";\nimport ViewPost from \"./Pages/ViewPost\";\nimport NotFound from \"./Pages/NotFound\";\nimport About from \"./Pages/About\";\n\n// Assets\nimport Background from './Assets/bg.jpg';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Load the Bootstrap CSS\n\nclass App extends Component {\n    render() {\n        return (\n            <Router basename={'/react'}>\n                <div style={RootStyle} className={'react-root-flex'}>\n                    <nav style={NavStyle}>\n                        <div style={NavButtonStyle}>Seshan Ravikumar</div>\n                        <Link to=\"/\" style={NavButtonStyle}>Home</Link>\n                        <Link to=\"/posts\" style={NavButtonStyle}>Blog</Link>\n                        <Link to=\"/about\" style={NavButtonStyle}>About</Link>\n                    </nav>\n                    <br />\n                    <div>\n                        <Switch>\n                            <Route path=\"/\" exact component={Home} />\n                            <Route path=\"/posts/:page\" component={Posts} />\n                            <Route path=\"/posts\" component={Posts} />\n                            <Route path=\"/post/:post\" component={ViewPost} />\n                            <Route path=\"/about\" component={About} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </div>\n                    <br />\n                    <nav style={NavStyle} className={'footer'}>\n                        <div style={NavButtonStyle}>(c) 2019 Seshan Ravikumar.</div>\n                        <div style={NavButtonStyle}>This website is Free Software under the GNU AGPL 3.0.</div>\n                    </nav>\n                </div>\n            </Router>\n        );\n    }\n}\nconst RootStyle= {\n    height: '100%'\n};\nconst NavStyle = {\n    display: 'flex',\n    backgroundImage: `url(${Background})`\n};\nconst NavButtonStyle = {\n    padding: '1em',\n    color: 'white',\n    borderRightStyle: 'solid'\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('react-root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.ddd42a7e.jpg\";"],"sourceRoot":""}